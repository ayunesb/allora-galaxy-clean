
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { toast } from "@/components/ui/use-toast";
import { getEnvVar } from '@/lib/env/envUtils';

// Get Supabase URL and key with hardcoded fallbacks to prevent blank screens
const supabaseUrl = getEnvVar('VITE_SUPABASE_URL', 'https://ijrnwpgsqsxzqdemtknz.supabase.co');
const supabaseAnonKey = getEnvVar('VITE_SUPABASE_ANON_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imlqcm53cGdzcXN4enFkZW10a256Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1ODM4MTgsImV4cCI6MjA2MjE1OTgxOH0.aIwahrPEK098sxdqAvsAJBDRCvyQpa9tb42gYn1hoRo');

// Initialize the Supabase client with fallback check
export const supabase = createClient(
  supabaseUrl || 'https://ijrnwpgsqsxzqdemtknz.supabase.co', 
  supabaseAnonKey || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imlqcm53cGdzcXN4enFkZW10a256Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1ODM4MTgsImV4cCI6MjA2MjE1OTgxOH0.aIwahrPEK098sxdqAvsAJBDRCvyQpa9tb42gYn1hoRo'
);

// Re-export correctly typed helpers
export const from = supabase.from.bind(supabase);
export const storage = supabase.storage;
export const channel = supabase.channel.bind(supabase);

// Network connectivity tracking
let isOffline = false;
let reconnectTimer: number | null = null;
let offlineOperations: Array<() => Promise<void>> = [];

// Check if we're in a browser environment
const isBrowser = typeof window !== 'undefined';

// Setup connectivity monitoring if in browser
if (isBrowser) {
  window.addEventListener('online', handleOnline);
  window.addEventListener('offline', handleOffline);
  
  // Initial check
  isOffline = !navigator.onLine;
}

function handleOffline() {
  isOffline = true;
  toast({ 
    title: "You are offline",
    description: "Changes will sync when connection is restored.",
    variant: "destructive"
  });
}

function handleOnline() {
  if (isOffline) {
    isOffline = false;
    toast({
      title: "You're back online!",
      description: "Syncing changes...",
    });
    
    // Process any queued offline operations
    processOfflineOperations();
  }
}

async function processOfflineOperations() {
  if (offlineOperations.length === 0) return;
  
  const operations = [...offlineOperations];
  offlineOperations = [];
  
  for (const operation of operations) {
    try {
      await operation();
    } catch (error) {
      console.error("Failed to process offline operation:", error);
    }
  }
  
  if (offlineOperations.length === 0) {
    toast({
      title: "All changes synced successfully!",
      description: "",
    });
  } else {
    toast({
      title: "Warning",
      description: `${offlineOperations.length} operations still pending sync.`,
      variant: "default",
      className: "border-yellow-600 bg-yellow-50 dark:bg-yellow-950/30",
    });
  }
}

// Export enhanced Supabase client with error handling
export const supabaseClient = {
  ...supabase,
  
  // Manually forward methods that TypeScript doesn't automatically infer
  from: supabase.from.bind(supabase),
  rpc: supabase.rpc.bind(supabase),
  functions: supabase.functions,
  
  // Retry mechanism for important operations
  async retryOperation<T>(
    operation: () => Promise<T>,
    options = { maxRetries: 3, delayMs: 1000 }
  ): Promise<T> {
    let lastError: any;
    
    for (let attempt = 0; attempt <= options.maxRetries; attempt++) {
      try {
        return await operation();
      } catch (error) {
        lastError = error;
        
        if (attempt < options.maxRetries) {
          console.warn(`Operation failed, retrying (${attempt + 1}/${options.maxRetries})...`, error);
          // Exponential backoff
          await new Promise(resolve => setTimeout(resolve, options.delayMs * Math.pow(2, attempt)));
        }
      }
    }
    
    throw lastError;
  },
  
  // Queue operation for offline processing
  queueOfflineOperation(operation: () => Promise<void>) {
    offlineOperations.push(operation);
  },
  
  // Check connection status
  isOffline: () => isOffline
};

// Add manual network status check function
export function checkNetworkStatus() {
  if (isBrowser && navigator.onLine !== !isOffline) {
    if (navigator.onLine) {
      handleOnline();
    } else {
      handleOffline();
    }
  }
  return !isOffline;
}

// Periodically check for reconnection if offline
export function startReconnectionCheck() {
  if (reconnectTimer === null && isOffline) {
    reconnectTimer = window.setInterval(() => {
      // Try a simple fetch to check connection
      fetch(supabaseUrl, { method: 'HEAD', mode: 'no-cors' })
        .then(() => {
          if (isOffline) handleOnline();
        })
        .catch(() => {
          // Still offline, do nothing
        });
    }, 10000) as unknown as number;
  }
}

export function stopReconnectionCheck() {
  if (reconnectTimer !== null) {
    clearInterval(reconnectTimer);
    reconnectTimer = null;
  }
}
